## It's OK to define global libs and ldflags here as they are defined as private in the libsries pkg-config file
## Restrain yourself to define dependency packages here as they are generated in the public field of pkg-config

## Package configuration
CONFIG = release

## C global parameters
CFLAGS_BASE = 
CFLAGS_PRIVATE = -isystem ../include 
CFLAGS_CONFIG_release = -O3 -DNDEBUG
CFLAGS_CONFIG_debug = -g -O0 -DDEBUG=1
CC_LDFLAGS = 
CC_DEPS =
CC_PKG = 
CC_LIBS =
CC_TEST_PKG = $(CC_PKG)
CC_TEST_LIBS = $(CC_LIBS) -lunitc -lrt 
CC_TEST_DEPS = $(CC_DEPS) libunitc+.a
CC_TEST_LDFLAGS = -L.

## C++ global parameters
CXXFLAGS_BASE = 
CXXFLAGS_PRIVATE = -isystem ../include
CXXFLAGS_CONFIG_release = -O3 -DNDEBUG
CXXFLAGS_CONFIG_release = -g -O0 -DDEBUG=1
CXX_LDFLAGS = 
CXX_DEPS = 
CXX_PKG = 
CXX_LIBS = 
CXX_TEST_PKG = $(CXX_PKG)
CXX_TEST_LIBS = $(CXX_LIBS) -lunitc++ 
CXX_TEST_DEPS = $(CXX_DEPS) libunitc++.a
CXX_TEST_LDFLAGS = -L.

## List of (pkg-config) packages this project depends on
## This affects CFLAGS, CXXFLAGS and LDFLAGS
# CXX_PKG = libfoo++
# CXX_PKG_libfoo++_version = >= 2.34.3

## List of (pg-config) packages this project depends on
## This affects CFLAGS, CXXFLAGS and LDFLAGS for tests
LIBS_TEST = 
PKG_TEST = 

## Cross-package flags for individual c/c++ source files
#CFLAGS_foo.c = -DFOO_CROSS=foo_cross
#CXXFLAGS_bar.cpp = -DBAR_CROSS=bar_cross

## C-compiled programs and their sources
bincc_package = merge 
## C++-compiled programs and their sources
bincxx_package = schedeval

bincc__src = 
bincxx__src = 
bincc__export = $(bincc__src) $(bincxx__src)
bin__deps = 
bin__pkg = 
bin__libs = 
bin__ldflags =
bin__cflags =
bin__cflags_private = 
bin__cxxflags =
bin__cxxflags_private = 
bin__embed = 

## Example
## List of packages
# bincc_package = foo bar

## Source files for C package foo
# bin_foo_src = foo.c
## cflags for source file foo.c when used to build package foo
# bin_foo_cflags_foo.c = -DFOO_PACKAGE=foo_package
## Package foo is rebuilt upon modifications of files in this list
# bin_foo_deps = $(FOO_DEPS)/foodeps.a
## Dependencies of package foo to other external packages resolvable by pkg-config
# bin_foo_pkg = foolib
## Minimal version of external dependency foolib
# bin_foo_pkg_foolib_version = >= 3.15.2
## Manual arbitrary addictional libs required to build package foo
# bin_foo_libs = -lm -lmanual_lib_foo
## Linkkj options to build package foo
# bin_foo_ldflags = -L$(MANUAL_LIB_FOO_SRC)/src
## cflag options to build objects of package foo
# bin_foo_cflags = -isystem $(INCLUDE_DIR)
## cflag options to build objects of package foo, that does not appear in the generated pkg-config file
# bin_foo_cflags_private = 
## cflag options to build objects of package foo
# bin_foo_cxxflags = -isystem $(INCLUDE_DIR)
## cflag options to build objects of package foo, that does not appear in the generated pkg-config file
# bin_foo_cxxflags_private = 
## Embed these files into the final excutable
# bin_foo_embed = foo-res.xml
## Files to exports when building a source package for foo: foo source files and non-source foo-res.xml to be integrated in the binary package
# bincc_foo_export = $(bincc_foo_src) foo-res.xml

## Source files for C package bar
## The package bar is minimal: one source file, no library
# bincc_bar_src = bar.c
# bincc_bar_export = $(bincc_bar_src)

mpb_size="8128"                 # Space allocated on MPB
 23 inner_buffer_size="$((64 * $KILO))"
 24 input_buffer_size="$((64 * KILO))"
 25 output_buffer_size="$((64 * $KILO))"

MPB_SIZE = 8128
INPUT_BUFFER_SIZE = 65536
OUTPUT_BUFFER_SIZE = 65536
INNER_BUFFER_SIZE = 65536
SHARED_DIR=/shared/$(USER)

bincc_schedeval_src = 
bincxx_schedeval_src = schedeval.cpp schedule_handling.cpp target_functions.cpp taskgraph_handling.cpp code_generation.cpp
bin_schedeval_export = $(bincc_schedeval_src) $(bincxx_schedeval_src)
bin_schedeval_pkg = igraph libxml++-2.6
bin_schedeval_static = 1
bin_schedeval_embed = fft2.graphml
bin_schedeval_ldflags = 
bin_schedeval_libs = 
bin_schedeval_cxxflags = 
bin_schedeval_cxxflags_private = 
CXXFLAGS_schedeval.cpp = 

bincc_merge_src = pipelined_merge.c
bin_merge_export = $(bincc_merge_src) $(bincxx_merge_src)
bin_merge_pkg = pelib snekkja-scc
bin_merge_static = 1
bin_merge_embed = 
bin_merge_ldflags = 
bin_merge_libs = 
bin_merge_deps = libsnekkja-scc.a
bin_merge_cflags = -DMPB_SIZE=$(MPB_SIZE) -DINPUT_BUFFER_SIZE=$(INPUT_BUFFER_SIZE) -DOUTPUT_BUFFER_SIZE=$(OUTPUT_BUFFER_SIZE) -DINNER_BUFFER_SIZE=$(INNER_BUFFER_SIZE) -D_GNU_SOURCE -DSHARED_DIR=$(SHARED_DIR)
bin_merge_cxxflags_private = 

## Static C library packages and their sources
lib_package = unitc unitc++ snekkja-scc

libcc__src = 
libcxx__src = 
lib__export = $(libcc__src) $(libcxx_src)
## Flags integrated as libs.private in pkg-config
lib__libs = 
lib__ldflags = 
lib__pkg = 
## Flags integrated as non-private pkg-config flags
## libs
lib__pkg_libs = 
## cflags
lib__pkg_cflags = 
lib__pkg_cxxflags = 
lib__pkg_description = General research utility library used in PELAB
lib__pkg_url = http://www.ida.liu.se/~nicme26
## Rebuild the library upon changes in these files
lib__deps =
## Embed these files into the final archive
lib__embed = 

libcc_unitc_src = unitc.c
libcxx_unitc_src = 
lib_unitc_export = $(libcc_unitc_src) $(libcxx_unitc_src)

libcc_snekkja-scc_src = scc.c
libcxx_snekkja-scc_src = 
lib_snekkja-scc_libs = 
lib_snekkja-scc_pkg = pelib-scc rcce_bigflags_gory_pwrmgmt_local_icc
lib_snekkja-scc_export = $(libcc_snekkja-scc_src) $(libcxx_snekkja-scc_src)

libcc_unitc++_src = 
libcxx_unitc++_src = unitc++.cpp
lib_unitc++_export = $(libcc_unitc++_src) $(libcxx_unitc++_src)

kkj_package = fft2

kkjcxx_fft2_generator = FFTTestSource.cpp
kkjcc_fft2_graph = 
kkjcxx_fft2_graph = fft2.graphml
kkj_fft2_embed = 
kkjcc_fft2_src = 
#kkjcxx_fft2_src = floatreceiver.c
#kkjcxx_fft2_src = CombineDFT.c CombineDFT.c FFTReorderSimple.c FFTTestSource.c split.c join.c floatreceiver.c
kkj_fft2_cflags =  
kkj_fft2_cflags_private = 
kkj_fft2_export = 
kkj_fft2_libs =
kkj_fft2_ldflags =
kkj_fft2_pkg = 
kkj_fft2_pkg_description = 

## C test packages and their sources
testcc_package = test
## C++ test packages and their sources
testcxx_package = 

testcc_test_src = test.c 
testcxx_test_src =  
test_test_deps = libunitc.a
test_test_libs = -lunitc
test_test_ldflags = -L.

testcc__src =  
testcxx__src =  
test__export = $(testcc__src) $(testcxx__src)
test__deps = 
test__pkg = 
test__libs = 
test__ldflags = 
testcxx__cflags = 
testcxx__cflags_private = 

## Where to continue compiling
subdirs = 

## Additional settings
clean = *.o *.txt *.fig *.bin *.e *.d *.obj

## Targets to run before any other target runs
## Can be a custom target
## To target by default
#FIRST=first

first:
	@echo cc_object = \"$(cc_object)\"
	@echo cxx_object = \"$(cxx_object)\"
	@echo libfft2.a: $(foreach lang,cc cxx,$(call object,$(patsubst lib%.a,%,libfft2.a),lib,$(lang)) $(call kkj_object,$(patsubst lib%.a,%,libfft2.a),kkj,$(lang)) $(foreach type,lib kkj,$(call embed,$(patsubst lib%.a,%,libfft2.a),$(type),$(lang)) $(call $(patsubst %,$(type)$(lang)_%_deps,$(call suffixin,$(patsubst lib%.a,%,libfft2.a),$($(type)$_package))))) $(call suffixin,$(patsubst lib%.a,%,libfft2.a),$(lib_package) $(kkj_package)).pc)
	@echo $(call source,kkjcxx_fft2_1.o,fft2,kkj,cxx)
	@echo $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2)
	@echo                                            $(call kkjcxx_fft2_$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2)))
	@echo                                       $(if $(call kkjcxx_fft2_$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2))),$(call kkjcxx_fft2_$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2))),$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2)).$(call ext,cxx))
	@echo $(if $(filter kkj%.o,kkjcxx_fft2_1.o),$(if $(call kkjcxx_fft2_$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2))),$(call kkjcxx_fft2_$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2))),$(shell snekkja -i $(call kkjcxx_fft2_graph) --read task $(call kkj_task,kkjcxx_fft2_1.o,cxx,fft2)).$(call ext,cxx)),$(call suffixin,$(patsubst %.o,%.$(call ext,cxx),kkjkkj_fft2_1.o),$(call src,fft2,kkj,cxx)))
	@echo $(patsubst kkjcxx_fft2_%.o,%,kkjcxx_fft2_1.o)
	@echo $(call projectof,kkjcxx_fft2_1.o,$(call typeof,kkjcxx_fft2_1.o),cxx)
	@echo $(call longest,$(foreach proj,$(call kkj_package),$(foreach lang,cc cxx,$(if $(filter kkj$(lang)_$(proj)%,kkjcxx_fft2_1.o),$(proj),))))
	@echo $(sort $(foreach lang,cc cxx,$(call projectof,kkjcxx_fft2_1.o,$(call typeof,kkjcxx_fft2_1.o),$(lang))))
	@echo $(call typeof,kkjcxx_fft2_1.o)
	@echo $(sort $(foreach lang,cc cxx,$(call projectof,kkjcxx_fft2_1.o,$(call typeof,kkjcxx_fft2_1.o),$(lang))))
	@echo $(call typeof,kkjcxx_fft2_1.o)
	@echo kkjcxx_fft2_1.o: $(call source,kkjcxx_fft2_1.o,$(sort $(foreach lang,cc cxx,$(call projectof,kkjcxx_fft2_1.o,$(call typeof,kkjcxx_fft2_1.o),$(lang)))),$(call typeof,kkjcxx_fft2_1.o),cxx)
	@/bin/false
