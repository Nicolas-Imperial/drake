# Copyright 2015 Nicolas Melot
#
# This file is part of Drake.
#
# Drake is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Drake is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Drake. If not, see <http://www.gnu.org/licenses/>.
#


## It's OK to define global libs and ldflags here as they are defined as private in the libsries pkg-config file
## Restrain yourself to define dependency packages here as they are generated in the public field of pkg-config

## Package options
SAMPLES = 500

## Package configuration
CONFIG = RELEASE

## Don't forget the double quotes for string
## Don't forget to escape them
## Power output file prefix
POWER_OUTPUT=\"/tmp/power-\"

## Time output file prefix
TIME_OUTPUT=\"/tmp/time-\"

MONITOR_EXCEPTIONS=1

#asan_cflags=-fsanitize=address
#asan_libs=-lasan
asan_cflags=
asan_libs=

## C global parameters
#CFLAGS_BASE = -DMONITOR_EXCEPTIONS=$(MONITOR_EXCEPTIONS)
CFLAGS_PRIVATE = -isystem ../include
CFLAGS_CONFIG_RELEASE = -O3 -DNDEBUG
CFLAGS_CONFIG_DEBUG = -g -O0 -DDEBUG=1 $(asan_cflags)
CC_LDFLAGS_PRIVATE = -L.
CC_LDFLAGS = 
CC_DEPS =
CC_PKG = 
CC_LIBS = $(asan_libs)
CC_TEST_PKG = $(CC_PKG) unit
CC_TEST_LIBS = $(CC_LIBS)
CC_TEST_DEPS = $(CC_DEPS)
CC_TEST_LDFLAGS = -L.

## C++ global parameters
CXXFLAGS_BASE = 
CXXFLAGS_PRIVATE = -isystem ../include
CXXFLAGS_CONFIG_RELEASE = -O3 -DNDEBUG
CXXFLAGS_CONFIG_DEBUG = -g -O0 -DDEBUG=1 $(asan_cflags)
CXX_LDFLAGS_PRIVATE = -L.
CXX_LDFLAGS = 
CXX_DEPS = 
CXX_PKG = 
CXX_LIBS = -lrt $(asan_libs)
CXX_TEST_PKG = $(CXX_PKG) unit
CXX_TEST_LIBS = $(CXX_LIBS)
CXX_TEST_DEPS = $(CXX_DEPS)
CXX_TEST_LDFLAGS = -L.

## List of (pkg-config) packages this project depends on
## This affects CFLAGS, CXXFLAGS and LDFLAGS
# CXX_PKG = libfoo++
# CXX_PKG_libfoo++_version = >= 2.34.3

## List of (pg-config) packages this project depends on
## This affects CFLAGS, CXXFLAGS and LDFLAGS for tests
LIBS_TEST = 
PKG_TEST = 

attach = drake-eval-build

## Cross-package flags for individual c/c++ source files
#CFLAGS_foo.c = -DFOO_CROSS=foo_cross
#CXXFLAGS_bar.cpp = -DBAR_CROSS=bar_cross

## C++-compiled programs and their sources
bincxx_package = drake

bincxx_drake_src = drake.cpp
bin_drake_export = $(bincxx_drake_embed) $(bincxx_drake_src) $(bin_drake_src)
bin_drake_deps =  
bin_drake_libs = 
bin_drake_pkg = pelib-core++ crown
bin_drake_ldflags = 
bin_drake_static = 0

## C-compiled programs and their sources
bincc_package = $(if $(APPLICATION),$(if $(BACKEND),drake-eval))

bincc_drake-eval_src = eval.c
bin_drake-eval_export = $(bincc_drake-eval_src) $(bincxx_drake-eval_src)
bin_drake-eval_pkg = $(if $(DRAKE_PKG),$(DRAKE_PKG),$(APPLICATION)) drake $(BACKEND)
bin_drake-eval_static = 0
bin_drake-eval_embed = 
bin_drake-eval_ldflags = 
bin_drake-eval_deps = drake.pc
bin_drake-eval_cflags = -DSAMPLES=$(SAMPLES) -DPIPELINE=$(APPLICATION) -DTIME_OUTPUT=$(TIME_OUTPUT) -DPOWER_OUTPUT=$(POWER_OUTPUT)
bin_drake-eval_cxxflags_private = 

bincc__src = 
bincxx__src = 
bincc__export = $(bincc__src) $(bincxx__src)
bin__deps = 
bin__pkg = 
bin__libs = 
bin__ldflags =
bin__cflags =
bin__cflags_private = 
bin__cxxflags =
bin__cxxflags_private = 
bin__embed = 

## Example
## List of packages
# bincc_package = foo bar

## Source files for C package foo
# bin_foo_src = foo.c
## cflags for source file foo.c when used to build package foo
# bin_foo_cflags_foo.c = -DFOO_PACKAGE=foo_package
## Package foo is rebuilt upon modifications of files in this list
# bin_foo_deps = $(FOO_DEPS)/foodeps.a
## Dependencies of package foo to other external packages resolvable by pkg-config
# bin_foo_pkg = foolib
## Minimal version of external dependency foolib
# bin_foo_pkg_foolib_version = >= 3.15.2
## Manual arbitrary addictional libs required to build package foo
# bin_foo_libs = -lm -lmanual_lib_foo
## Lindrake options to build package foo
# bin_foo_ldflags = -L$(MANUAL_LIB_FOO_SRC)/src
## cflag options to build objects of package foo
# bin_foo_cflags = -isystem $(INCLUDE_DIR)
## cflag options to build objects of package foo, that does not appear in the generated pkg-config file
# bin_foo_cflags_private = 
## cflag options to build objects of package foo
# bin_foo_cxxflags = -isystem $(INCLUDE_DIR)
## cflag options to build objects of package foo, that does not appear in the generated pkg-config file
# bin_foo_cxxflags_private = 
## Embed these files into the final excutable
# bin_foo_embed = foo-res.xml
## Files to exports when building a source package for foo: foo source files and non-source foo-res.xml to be integrated in the binary package
# bincc_foo_export = $(bincc_foo_src) foo-res.xml

## Source files for C package bar
## The package bar is minimal: one source file, no library
# bincc_bar_src = bar.c
# bincc_bar_export = $(bincc_bar_src)

## Static C library packages and their sources
lib_package = drake drake-scheduler

libcc_drake_src = stream.c task.c application.c
libcxx_drake_src = 
lib_drake_cflags = 
lib_drake_export = $(libcc_drake_src) $(libcxx_drake_src) eval.c
lib_drake_pkg = pelib-core

libcc_drake-scheduler_src = scheduler.c
libcxx_drake-scheduler_src = 
lib_drake-scheduler_cflags = 
lib_drake-scheduler_export = $(libcc_drake-scheduler_src) $(libcxx_drake-scheduler_src) eval.c
lib_drake-scheduler_pkg = 

sharedcc_package = drake drake-scheduler
sharedcxx_package = pelib-drake-app

sharedcc_drake_src = stream.c task.c application.c
sharedcxx_drake_src = 
shared_drake_cflags = -fPIC
shared_drake_export = $(sharedcc_drake_src) $(sharedcxx_drake_src) eval.c
shared_drake_pkg = pelib-core

EXPERIMENTAL_CODE=0
sharedcc_pelib-drake-app_src = 
sharedcxx_pelib-drake-app_src = DrakeApp.cpp drake-app.cpp
shared_pelib-drake-app_export = $(sharedcc_pelib-drake-app_src) $(sharedcxx_pelib-drake-app_src) $(shared_pelib-drake-app_embed)
shared_pelib-drake-app_pkg = pelib-core++
shared_pelib-drake-app_embed = drake_app.c
shared_pelib-drake-app_cflags = -fPIC
shared_pelib-drake-app_cxxflags = 
shared_pelib-drake-app_cxxflags_private = -DEXPERIMENTAL_CODE=$(EXPERIMENTAL_CODE)

sharedcc_drake-scheduler_src = scheduler.c
sharedcxx_drake-scheduler_src = 
shared_drake-scheduler_cflags = -fPIC
shared_drake-scheduler_export = $(sharedcc_drake-scheduler_src) $(sharedcxx_drake-scheduler_src) eval.c
shared_drake-scheduler_pkg = 

libcc__src = 
libcxx__src = 
lib__export = $(libcc__src) $(libcxx_src)
## Flags integrated as libs.private in pkg-config
lib__libs = 
lib__ldflags = 
lib__pkg = 
## Flags integrated as non-private pkg-config flags
## libs
lib__pkg_libs = 
## cflags
lib__pkg_cflags = 
lib__pkg_cxxflags = 
lib__pkg_description = General research utility library used in PELAB
lib__pkg_url = http://www.ida.liu.se/~nicme26
## Rebuild the library upon changes in these files
lib__deps =
## Embed these files into the final archive
lib__embed = 

drake_package = 

drakecc__graph =  
drakecxx__graph = 
drake__scheduler = 
drake__platform = 
drake__embed = 
drakecc__src = 
drake__cflags =  
drake__cflags_private = 
drake__export = 
drake__libs =
drake__ldflags = -lm
drake__pkg = 
drake__pkg_description = 

## C test packages and their sources
testcc_package = 
## C++ test packages and their sources
testcxx_package = 

testcc__src =  
testcxx__src =  
test__export = $(testcc__src) $(testcxx__src)
test__deps = 
test__pkg = 
test__libs = 
test__ldflags = 
testcxx__cflags = 
testcxx__cflags_private = 

## Where to continue compiling
subdirs = 

## Additional settings
clean = *.o *.txt *.fig *.bin *.e *.d *.obj

post-install:
	chmod 755 $(DESTDIR)$(final_sharedir)/drake-eval-build 
	ln -sf $(DESTDIR)$(final_sharedir)/drake-eval-build $(DESTDIR)$(final_bindir)

## Targets to run before any other target runs
## Can be a custom target
## To target by default
#FIRST=first

first:
	@echo $(call source,libcxx_unitc++_unitc++.o,unitc++,lib,cxx)
	@/bin/false
